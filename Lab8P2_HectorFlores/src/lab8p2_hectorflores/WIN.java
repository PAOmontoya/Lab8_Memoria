package lab8p2_hectorflores;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Enumeration;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.AncestorListener;
import javax.swing.text.Document;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

public class WIN extends javax.swing.JFrame {

    /**
     * Creates new form WIN
     */
    public WIN() {
        initComponents();
        this.setLocationRelativeTo(null);
        setAll();
        boxActions();
        arbolHandler=new Arbol(jTree1);
        //jTreeActions();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nuevoCB = new javax.swing.JComboBox<>();
        orderCB = new javax.swing.JComboBox<>();
        cutBTN = new javax.swing.JButton();
        copyBTN = new javax.swing.JButton();
        pasteBTN = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        displayPAN = new javax.swing.JPanel();
        editCB = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nuevoCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        nuevoCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoCBActionPerformed(evt);
            }
        });

        orderCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                orderCBItemStateChanged(evt);
            }
        });
        orderCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderCBActionPerformed(evt);
            }
        });

        cutBTN.setText("Cut");
        cutBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutBTNActionPerformed(evt);
            }
        });

        copyBTN.setText("Copy");
        copyBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyBTNActionPerformed(evt);
            }
        });

        pasteBTN.setText("Paste");
        pasteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteBTNActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTree1);

        javax.swing.GroupLayout displayPANLayout = new javax.swing.GroupLayout(displayPAN);
        displayPAN.setLayout(displayPANLayout);
        displayPANLayout.setHorizontalGroup(
            displayPANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        displayPANLayout.setVerticalGroup(
            displayPANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(displayPAN);

        editCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        editCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCBActionPerformed(evt);
            }
        });

        jLabel1.setText("Nuevo:");

        jLabel2.setText("...");

        jLabel3.setText("Ordenar por:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nuevoCB, javax.swing.GroupLayout.Alignment.LEADING, 0, 110, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cutBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pasteBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(orderCB, 0, 110, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editCB, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevoCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cutBTN)
                    .addComponent(copyBTN)
                    .addComponent(pasteBTN)
                    .addComponent(editCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cutBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutBTNActionPerformed
        //funciones de cortar
    }//GEN-LAST:event_cutBTNActionPerformed

    private void copyBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBTNActionPerformed
        DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            
        if (nodoSeleccionado == null){
            return;
        }
        
        String nombreNodoSeleccionado = nodoSeleccionado.toString();
        
        String destinationPath = JOptionPane.showInputDialog("Ingrese el destino donde se copiara este archivo");
        
        File destino = new File (destinationPath);
        
        if (destino.exists()){
            FileManager.copyFileOrFolder(nombreNodoSeleccionado, destinationPath);
        } else {
            JOptionPane.showMessageDialog(null, "El destino no existe, no se ha copiado.");
        }
    }//GEN-LAST:event_copyBTNActionPerformed

    private void pasteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteBTNActionPerformed
        //funciones de pegar
    }//GEN-LAST:event_pasteBTNActionPerformed

    private void editCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCBActionPerformed
        
    }//GEN-LAST:event_editCBActionPerformed

    private void orderCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderCBActionPerformed
        
    }//GEN-LAST:event_orderCBActionPerformed

    private void orderCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_orderCBItemStateChanged

    }//GEN-LAST:event_orderCBItemStateChanged

    private void nuevoCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nuevoCBActionPerformed

    
    
    private Arbol arbolHandler;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WIN().setVisible(true);
            }
        });
    }
    
    void setAll(){
        setBoxes();
    }
    
    void setBoxes(){
        orderCB.removeAllItems();
        orderCB.addItem("Nombre");
        orderCB.addItem("Fecha");
        orderCB.addItem("Tipo");
        orderCB.addItem("Tamano");
        
        nuevoCB.removeAllItems();
        nuevoCB.addItem("Carpeta");
        nuevoCB.addItem("Archivo");
        
        editCB.removeAllItems();
        editCB.addItem("Cambiar Nombre");
        editCB.addItem("Editar Archivo");
    }

    void boxActions(){
        //ORDER COMBO BOX
        orderCB.addActionListener(new ActionListener(){
            @Override
        public void actionPerformed(ActionEvent e){
            String selectedOption=(String) orderCB.getSelectedItem();
            
            DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            
            if (nodoSeleccionado == null){
                return;
            }
            
            DefaultMutableTreeNode nodoActualizado = null;
            
            String nombreNodoSeleccionado = nodoSeleccionado.toString();
        
            File archivo = new File (nombreNodoSeleccionado);
            
            if(selectedOption.equals("Nombre")){
                nodoActualizado = arbolHandler.ordenarPorNombre(archivo);
            }else if(selectedOption.equals("Fecha")){
                nodoActualizado = arbolHandler.ordenarPorFecha(archivo);
            }else if(selectedOption.equals("Tipo")){
                nodoActualizado = arbolHandler.ordenarPorTipo(archivo);
            }else if(selectedOption.equals("Tamano")){
                nodoActualizado = arbolHandler.ordenarPorSize(archivo);
            }
            
            if (nodoActualizado != null){
                nodoSeleccionado.removeAllChildren();
                Enumeration hijos = nodoActualizado.children();
                
                while (hijos.hasMoreElements()){
                    nodoSeleccionado.add((DefaultMutableTreeNode) hijos.nextElement());
                }
                
                DefaultMutableTreeNode modelo = ((DefaultMutableTreeNode) jTree1.getModel());
                modelo.notifyAll();
            }
        }
        });
        
        
        //NUEVO COMBO BOX
        nuevoCB.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            String selectedOption =(String) nuevoCB.getSelectedItem();
            
            DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            
            if (nodoSeleccionado == null){
                return;
            }
            
            DefaultMutableTreeNode nodoActualizado = null;
            
            if (selectedOption.equals("Archivo")) {
                
                String fileName = JOptionPane.showInputDialog(null, "Enter file name:");
                
                String extension = fileName.substring(fileName.lastIndexOf(".") + 1);
                
                if (fileName != null && !fileName.isEmpty()) {
                    
                    try {
                        nodoActualizado = arbolHandler.crearUnArchivo(nodoSeleccionado, fileName, extension);
                    }  catch (IOException h){
                        
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Debe ingresar un nombre para su archivo");
                }
                
            } else if (selectedOption.equals("Carpeta")) {
                String folderName = JOptionPane.showInputDialog(null, "Enter folder name:");
                if (folderName != null && !folderName.isEmpty()) {
                    nodoActualizado = arbolHandler.crearCarpeta(nodoSeleccionado, folderName);
                }
            }
            
            if (nodoActualizado != null){
                nodoSeleccionado.removeAllChildren();
                Enumeration hijos = nodoActualizado.children();
                
                while (hijos.hasMoreElements()){
                    nodoSeleccionado.add((DefaultMutableTreeNode) hijos.nextElement());
                }
                
                DefaultMutableTreeNode modelo = ((DefaultMutableTreeNode) jTree1.getModel());
                modelo.notifyAll();
            }
            
        }
    });
        
       //EDIT COMBO  BOX
       editCB.addActionListener(new ActionListener(){
           @Override
           public void actionPerformed(ActionEvent e){
               String selectedOption=(String)editCB.getSelectedItem();
               
               DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            
                if (nodoSeleccionado == null){
                    return;
                }

                String nombreNodoSeleccionado = nodoSeleccionado.toString();
                
                String newName = JOptionPane.showInputDialog("Ingrese el path nuevo del archivo:");
               
               if(selectedOption.equals("Cambiar Nombre")){
                   FileManager.renameFileOrFolder(nombreNodoSeleccionado, newName);
               }else if(selectedOption.equals("Editar Archivo")){
                   
                   try {
                       arbolHandler.writeText(nombreNodoSeleccionado);
                   } catch (IOException j){
                       
                   }
               }
           }
       }
       );    
    }
    
    private DefaultTreeModel treeModel;

    public WIN() {
        initComponents();
        this.setLocationRelativeTo(null);
        setAll();
        boxActions();
        arbolHandler = new Arbol(jTree1);
        // Populate the JTree with the file system
        populateTree();
        jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree1.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                                       jTree1.getLastSelectedPathComponent();

                if (node == null) return;

                Object nodeInfo = node.getUserObject();
                if (node.isLeaf()) {
                    File selectedFile = (File) nodeInfo;
                    // Do something with the selected file
                    System.out.println("Selected file: " + selectedFile.getAbsolutePath());
                } else {
                    // Accion cuando el folder es seleccionado 
                }
            }
        });
    }

    //aqui le meto el sistema de files al jtree
    private void populateTree() {
        File rootFile = new File("YourRootDirectoryPath");
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(rootFile);
        treeModel = new DefaultTreeModel(rootNode);
        jTree1.setModel(treeModel);
        jTree1.setRootVisible(true);
        addFiles(rootFile, rootNode);
    }

    // aquí se añaden las files 
    private void addFiles(File file, DefaultMutableTreeNode parentNode) {
        if (!file.isDirectory()) return;

        File[] files = file.listFiles();
        for (File f : files) {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(f);
            parentNode.add(node);
            if (f.isDirectory()) {
                addFiles(f, node);
            }
        }
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyBTN;
    private javax.swing.JButton cutBTN;
    private javax.swing.JPanel displayPAN;
    private javax.swing.JComboBox<String> editCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTree jTree1;
    private javax.swing.JComboBox<String> nuevoCB;
    private javax.swing.JComboBox<String> orderCB;
    private javax.swing.JButton pasteBTN;
    // End of variables declaration//GEN-END:variables
}
